#!/usr/bin/env python
import time
import dht
import pms
import schedule
import requests
import re, uuid
import socket
import fcntl
import struct

from time import sleep

from raven import Client
client = Client('')


DEBUG=True

FAIL_COUNT=10
DHT_PIN=23
skip_count=0
temperature=0
humidity=0
pm1=0
pm2_5=0
pm10=0
mac=''
ip=''
building='b'
floor='3'
area='a'

th = dht.DHT(DHT_PIN)
pm = pms.PMS()

def device_info():
  global mac
  global ip
  global building
  global floor
  global area
  mac=':'.join(re.findall('..', '%012x' % uuid.getnode()))
  s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  try:
    ip=socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', 'eth0')
    )[20:24])
  except IOError as e:
    print "Error to get MAC address"
  building='B'
  floor='3'
  area='a'

def reset_device():
  global skip_count
  skip_count = 0
  print "reset device"

def capture_data():
  global skip_count
  global FAIL_COUNT
  global temperature
  global humidity
  global pm1
  global pm2_5
  global pm10
  global mac
  global ip
  global building
  global floor
  global area
  print "capture data pms"
  for i in range(0, 2, +1):
    pm1 = -1
    pm2_5 = -1
    pm10 = -1
    pmdata=pm.read()
    if pmdata:
      pm1 = pmdata['pm1']
      pm2_5 = pmdata['pm25']
      pm10 = pmdata['pm10']
      break
    sleep(2)

  print "capture data th"
  for i in range(0, 2, +1):
    temperature = -1
    humidity = -1
    res = th.read()
    if res:
      temperature = res.temperature
      humidity = res.humidity
      break
    sleep(0.5)

  if DEBUG:
    print "Temperature:" + str(temperature)
    print "Humidity   :" + str(humidity)
    print "PM1        :" + str(pm1)
    print "PM2.5      :" + str(pm2_5)
    print "PM10       :" + str(pm10)

def report_data():
  global skip_count
  payload = {'temperature': temperature, 'humidity': humidity, 'pm1': pm1, 'pm2_5': pm2_5, 'pm10': pm10, 'mac': mac, 'ip':ip, 'building':building, 'floor':floor, 'area': area}
  print payload
  try:
    r = requests.post("http://sensor.elasticservice.co/sensors/report", data=payload)
    print r.status_code
  except requests.exceptions.ConnectionError:
    print "Fail to connect server"

if __name__ == '__main__':
  try:
    device_info()
    capture_data()
    report_data()
    schedule.every(1).minutes.do(capture_data)
    schedule.every(1).minutes.do(report_data)
    while 1:
      schedule.run_pending()
      time.sleep(1)
  except KeyboardInterrupt:
    exit
  except Exception as e:
    print e
    client.captureException()
